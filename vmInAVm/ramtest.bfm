Program for testing what are essentially pointers
The program takes user input  then fetches the value in the specified RAM cell  then outputs it
What the program actually achieves is converting a number (1 to 26) into a letter of the alphabet using the lookup table in ram
Except that we can only convert one digit of input  so it's only 1 to 9 input
If we could go to 26 then it would probably be actually shorter than hard coded if statements
Type 0 to make the program quit


!dvari running 0 1!
!dvar should_not_break 1!
!dvar input 2!
!dvari digit_to_int 3 48!
!dvar register 4!
!dvar copyreg 5! register for holding copy temp values
!dvari ram_offset 6 12! offset of ram0 from target_pos_mov

mov means a moving buffer  these are the home positions  the moving buffer moves so it's not always at the home positions
!dvar target_pos_mov 7! this buffer is also used to return the fetched value
!dvar return_pos_mov 8!
!dvar temp_mov 9!

setting up the lookup table
!dvari A 20 65!
!dvari B 21 66!
!dvari C 22 67!
!dvari D 23 68!
!dvari E 24 69!
!dvari F 25 70!
!dvari G 26 71!
!dvari H 27 72!
!dvari I 28 73!

!loopz running!
    INPUT AND PARSE AS INT
        !lvar input!,
        !copy digit_to_int register copyreg!
        !sub input register!
    
    QUIT IF IT'S ZERO
    !copy input register copyreg!
    !ifz register copyreg!
        !setl running 0!
    !eifz copyreg!
    

    ELSE IT'S OK (we need an "else" to make the if work like a break)
    !copy input should_not_break copyreg!
    !ifnz should_not_break!

        ADD OFFSET FOR START OF RAM
            !copy ram_offset register copyreg!
            !add input register!
            !move input target_pos_mov!
            !lvar target_pos_mov! --- subtract one because indexing from 0  subtract another one because userfacing indexes from 1
        
        CLEAR MOVING BUFFER
            !setl return_pos_mov 0!

        FETCHING VALUE
            GO OUT TO TARGET
                !lvar target_pos_mov!
                !movep 0!
                [
                    !swap 0 3 2! !swap 1 3 2! !move 3 2! shift to right
                    !movepr 1! set new cursor pos
                    !lvar 1! + !lvar 0! - housekeeping and loop condition
                ]

            !copy 3 0 2! save our value into the now useless target_pos buffer

            GO HOME
                !lvar 1!
                [
                    !swap -1 1 2! !swap 0 -1 2! !move 1 2! shift to left
                    !movepl 1! set new cursor pos
                    !lvar 1! - housekeeping and loop condition
                ]

                !movep return_pos_mov! reset pointer

        DOING OUTPUT
            !lvar target_pos_mov!.
    !eifnz should_not_break!
!eloopz running!